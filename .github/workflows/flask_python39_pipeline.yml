name: AWS ECR push and deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: coverage run -m pytest app_test.py

      - name: Show coverage report
        run: coverage report -m

      - name: Run the SCA scan on the source code
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: "latest"
          # IMAGE_TAG: ${{ github.sha }}

        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.KUBECONFIG }} | base64 --decode > ~/.kube/config

      - name: Deploy to EKS
        run: |
          kubectl apply -f deployment-definition.yml
          kubectl port-forward deployment/api-deployment 5000:5000 > /dev/null 2>&1 &  # Run in the background
          sleep 15  # Wait for a few seconds for port forwarding to establish

      - name: Execute basic http request
        run: |
          sleep 10 
          curl -X GET http://localhost:5000/users/1

      - name: Create NodePort service
        run: |
          kubectl expose deployment api-deployment --type=NodePort --port=5000 --target-port=5000 --name=api-service
          NODE_PORT=$(kubectl get svc api-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "::set-output name=node_port::$NODE_PORT"
          echo "::set-output name=service_url::http://$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[0].address}'):$NODE_PORT"
